import { Connection, PublicKey } from '@solana/web3.js';
import { TreeInfo, TreeType } from '../state/types';
import { StateTreeLUTPair } from '../constants';
/**
 * @deprecated use {@link getTreeInfoByPubkey} instead
 */
export declare function getStateTreeInfoByPubkey(treeInfos: TreeInfo[], treeOrQueue: PublicKey): TreeInfo;
export declare function getTreeInfoByPubkey(treeInfos: TreeInfo[], treeOrQueue: PublicKey): TreeInfo;
/**
 * @deprecated use {@link selectStateTreeInfo} instead.
 *
 * Get a random tree and queue from a set of provided state tree infos.
 *
 * @param infos Set of state tree infos
 * @returns A random tree and queue
 */
export declare function pickRandomTreeAndQueue(infos: TreeInfo[]): {
    tree: PublicKey;
    queue: PublicKey;
};
/**
 * Select a pseudo-random active state tree info from the set of provided state
 * tree infos.
 *
 * Using this reduces write-lock contention on state trees.
 *
 * @param infos                 Set of state tree infos
 *
 * @param treeType              Optional: Only use if you know what you are
 *                              doing. The type of tree.
 * @param useMaxConcurrency     Optional: Only use if you know what you are
 *                              doing. If true, select from all infos.
 *
 * @returns A pseudo-randomly selected tree info
 */
export declare function selectStateTreeInfo(infos: TreeInfo[], treeType?: TreeType, useMaxConcurrency?: boolean): TreeInfo;
/**
 * Get active state tree infos from LUTs.
 *
 * @param connection            The connection to the cluster
 * @param stateTreeLUTPairs     The state tree lookup table pairs
 *
 * @returns The active state tree infos
 */
export declare function getAllStateTreeInfos({ connection, stateTreeLUTPairs, }: {
    connection: Connection;
    stateTreeLUTPairs: StateTreeLUTPair[];
}): Promise<TreeInfo[]>;
