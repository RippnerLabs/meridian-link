import { ConfirmOptions, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';
import { Rpc } from '../rpc';
import { AddressTreeInfo, TreeInfo } from '../state';
import BN from 'bn.js';
/**
 * Create compressed account with address
 *
 * @param rpc                   RPC to use
 * @param payer                 Payer of the transaction and initialization fees
 * @param seeds                 Seeds to derive the new account address
 * @param programId             Owner of the new account
 * @param addressTreeInfo       Optional address tree info. Defaults to a current
 *                              shared address tree.
 * @param outputStateTreeInfo   Optional output state tree. Defaults to fetching
 *                              a current shared state tree.
 * @param confirmOptions        Options for confirming the transaction
 *
 * @return Transaction signature
 */
export declare function createAccount(rpc: Rpc, payer: Signer, seeds: Uint8Array[], programId: PublicKey, addressTreeInfo?: AddressTreeInfo, outputStateTreeInfo?: TreeInfo, confirmOptions?: ConfirmOptions): Promise<TransactionSignature>;
/**
 * Create compressed account with address and lamports
 *
 * @param rpc                   RPC to use
 * @param payer                 Payer of the transaction and initialization fees
 * @param seeds                 Seeds to derive the new account address
 * @param lamports              Number of compressed lamports to initialize the
 *                              account with
 * @param programId             Owner of the new account
 * @param addressTreeInfo       Optional address tree info. Defaults to a
 *                              current shared address tree.
 * @param outputStateTreeInfo   Optional output state tree. Defaults to a
 *                              current shared state tree.
 * @param confirmOptions        Options for confirming the transaction
 *
 * @return Transaction signature
 */
export declare function createAccountWithLamports(rpc: Rpc, payer: Signer, seeds: Uint8Array[], lamports: number | BN, programId: PublicKey, addressTreeInfo?: AddressTreeInfo, outputStateTreeInfo?: TreeInfo, confirmOptions?: ConfirmOptions): Promise<TransactionSignature>;
