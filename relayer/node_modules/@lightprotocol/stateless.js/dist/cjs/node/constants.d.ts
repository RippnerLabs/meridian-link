import BN from 'bn.js';
import { Buffer } from 'buffer';
import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { TreeInfo, TreeType } from './state/types';
export declare enum VERSION {
    V1 = "V1",
    V2 = "V2"
}
/**
/**
 * @internal
 * Feature flags. Only use if you know what you are doing.
 */
export declare const featureFlags: {
    version: VERSION;
    isV2: () => boolean;
};
/**
 * Returns the correct endpoint name for the current API version. E.g.
 * versionedEndpoint('getCompressedAccount') -> 'getCompressedAccount' (V1)
 * or 'getCompressedAccountV2' (V2)
 */
export declare const versionedEndpoint: (base: string) => string;
export declare const FIELD_SIZE: BN;
export declare const HIGHEST_ADDRESS_PLUS_ONE: BN;
export declare const COMPUTE_BUDGET_PATTERN: number[];
export declare const INVOKE_DISCRIMINATOR: Buffer;
export declare const INVOKE_CPI_DISCRIMINATOR: Buffer;
export declare const INVOKE_CPI_WITH_READ_ONLY_DISCRIMINATOR: Buffer;
export declare const INVOKE_CPI_WITH_ACCOUNT_INFO_DISCRIMINATOR: Buffer;
export declare const INSERT_INTO_QUEUES_DISCRIMINATOR: Buffer;
export declare const noopProgram = "noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV";
export declare const lightSystemProgram = "SySTEM1eSU2p4BGQfQpimFEWWSC1XDFeun3Nqzz3rT7";
export declare const accountCompressionProgram = "compr6CUsB5m2jS4Y3831ztGSTnDpnKJTKS95d64XVq";
export declare const getRegisteredProgramPda: () => PublicKey;
export declare const getAccountCompressionAuthority: () => PublicKey;
export declare const defaultStaticAccounts: () => PublicKey[];
export declare const defaultStaticAccountsStruct: () => {
    registeredProgramPda: PublicKey;
    noopProgram: PublicKey;
    accountCompressionProgram: PublicKey;
    accountCompressionAuthority: PublicKey;
    cpiSignatureAccount: null;
};
export type StateTreeLUTPair = {
    stateTreeLookupTable: PublicKey;
    nullifyLookupTable: PublicKey;
};
/**
 * Returns the Default Public State Tree LUTs for Devnet and Mainnet-Beta.
 */
export declare const defaultStateTreeLookupTables: () => {
    mainnet: StateTreeLUTPair[];
    devnet: StateTreeLUTPair[];
};
/**
 * @internal
 */
export declare const isLocalTest: (url: string) => boolean;
/**
 * @internal
 */
export declare const localTestActiveStateTreeInfos: () => TreeInfo[];
export declare const getDefaultAddressTreeInfo: () => {
    tree: PublicKey;
    queue: PublicKey;
    cpiContext: null;
    treeType: TreeType;
    nextTreeInfo: null;
};
/**
 * @deprecated use {@link rpc.getStateTreeInfos} and {@link selectStateTreeInfo} instead.
 * for address trees, use {@link getDefaultAddressTreeInfo} instead.
 * Use only with Localnet testing.
 * For public networks, fetch via {@link defaultStateTreeLookupTables} and {@link getAllStateTreeInfos}.
 */
export declare const defaultTestStateTreeAccounts: () => {
    nullifierQueue: PublicKey;
    merkleTree: PublicKey;
    merkleTreeHeight: number;
    addressTree: PublicKey;
    addressQueue: PublicKey;
};
/**
 * @internal testing only
 */
export declare const defaultTestStateTreeAccounts2: () => {
    nullifierQueue2: PublicKey;
    merkleTree2: PublicKey;
};
export declare const COMPRESSED_TOKEN_PROGRAM_ID: PublicKey;
export declare const stateTreeLookupTableMainnet = "7i86eQs3GSqHjN47WdWLTCGMW6gde1q96G2EVnUyK2st";
export declare const nullifiedStateTreeLookupTableMainnet = "H9QD4u1fG7KmkAzn2tDXhheushxFe1EcrjGGyEFXeMqT";
export declare const stateTreeLookupTableDevnet = "Dk9mNkbiZXJZ4By8DfSP6HEE4ojZzRvucwpawLeuwq8q";
export declare const nullifiedStateTreeLookupTableDevnet = "AXbHzp1NgjLvpfnD6JRTTovXZ7APUCdtWZFCRr5tCxse";
export declare const nullifierQueuePubkey = "nfq1NvQDJ2GEgnS8zt9prAe8rjjpAW1zFkrvZoBR148";
export declare const cpiContextPubkey = "cpi1uHzrEhBG733DoEJNgHCyRS3XmmyVNZx5fonubE4";
export declare const merkletreePubkey = "smt1NamzXdq4AMqS2fS2F1i5KTYPZRhoHgWx38d8WsT";
export declare const addressTree = "amt1Ayt45jfbdw5YSo7iz6WZxUmnZsQTYXy82hVwyC2";
export declare const addressQueue = "aq1S9z4reTSQAdgWHGD2zDaS39sjGrAxbR31vxJ2F4F";
export declare const merkleTree2Pubkey = "smt2rJAFdyJJupwMKAqTNAJwvjhmiZ4JYGZmbVRw1Ho";
export declare const nullifierQueue2Pubkey = "nfq2hgS7NYemXsFaFUCe3EMXSDSfnZnAe27jC6aPP1X";
export declare const cpiContext2Pubkey = "cpi2cdhkH5roePvcudTgUL8ppEBfTay1desGh8G8QxK";
export declare const batchMerkleTree = "HLKs5NJ8FXkJg8BrzJt56adFYYuwg5etzDtBbQYTsixu";
export declare const batchQueue = "6L7SzhYB3anwEQ9cphpJ1U7Scwj57bx2xueReg7R9cKU";
export declare const confirmConfig: ConfirmOptions;
export declare const DEFAULT_MERKLE_TREE_HEIGHT = 26;
export declare const DEFAULT_MERKLE_TREE_ROOTS = 2800;
/** Threshold (per asset) at which new in-UTXOs get merged, in order to reduce UTXO pool size */
export declare const UTXO_MERGE_THRESHOLD = 20;
export declare const UTXO_MERGE_MAXIMUM = 10;
/**
 * Treshold after which the currently used transaction Merkle tree is switched
 * to the next one
 */
export declare const TRANSACTION_MERKLE_TREE_ROLLOVER_THRESHOLD: BN;
/**
 * Fee to provide continous funding for the state Merkle tree.
 * Once the state Merkle tree is at 95% capacity the accumulated fees
 * will be used to fund the next state Merkle tree with the same parameters.
 *
 * Is charged per output compressed account.
 */
export declare const STATE_MERKLE_TREE_ROLLOVER_FEE: BN;
/**
 * Fee to provide continous funding for the address queue and address Merkle tree.
 * Once the address Merkle tree is at 95% capacity the accumulated fees
 * will be used to fund the next address queue and address tree with the same parameters.
 *
 * Is charged per newly created address.
 */
export declare const ADDRESS_QUEUE_ROLLOVER_FEE: BN;
/**
 * Is charged if the transaction nullifies at least one compressed account.
 */
export declare const STATE_MERKLE_TREE_NETWORK_FEE: BN;
/**
 * Is charged if the transaction creates at least one address.
 */
export declare const ADDRESS_TREE_NETWORK_FEE: BN;
