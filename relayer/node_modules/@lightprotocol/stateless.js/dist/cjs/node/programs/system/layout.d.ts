import { Buffer } from 'buffer';
import { PublicKey, AccountMeta } from '@solana/web3.js';
import { Layout } from '@coral-xyz/borsh';
import { InstructionDataInvoke, InstructionDataInvokeCpi, PublicTransactionEvent } from '../../state';
export declare const CompressedAccountLayout: import("buffer-layout").Layout<unknown>;
export declare const MerkleContextLayout: import("buffer-layout").Layout<unknown>;
export declare const NewAddressParamsLayout: import("buffer-layout").Layout<unknown>;
export declare const InstructionDataInvokeLayout: Layout<InstructionDataInvoke>;
export declare function encodeInstructionDataInvoke(data: InstructionDataInvoke): Buffer;
export declare const InstructionDataInvokeCpiLayout: Layout<InstructionDataInvokeCpi>;
export declare const CompressedProofLayout: import("buffer-layout").Layout<unknown>;
export declare const CompressedCpiContextLayout: import("buffer-layout").Layout<unknown>;
export declare const NewAddressParamsAssignedPackedLayout: import("buffer-layout").Layout<unknown>;
export declare const PackedMerkleContextLayout: import("buffer-layout").Layout<unknown>;
export declare const InAccountLayout: import("buffer-layout").Layout<unknown>;
export declare const PackedReadOnlyAddressLayout: import("buffer-layout").Layout<unknown>;
export declare const PackedReadOnlyCompressedAccountLayout: import("buffer-layout").Layout<unknown>;
export declare const InstructionDataInvokeCpiWithReadOnlyLayout: import("buffer-layout").Layout<unknown>;
export declare function decodeInstructionDataInvokeCpiWithReadOnly(buffer: Buffer): unknown;
export declare function decodeInstructionDataInvoke(buffer: Buffer): InstructionDataInvoke;
export declare function decodeInstructionDataInvokeCpi(buffer: Buffer): InstructionDataInvokeCpi;
export type invokeAccountsLayoutParams = {
    /**
     * Fee payer.
     */
    feePayer: PublicKey;
    /**
     * Authority.
     */
    authority: PublicKey;
    /**
     * The registered program pda
     */
    registeredProgramPda: PublicKey;
    /**
     * Noop program.
     */
    noopProgram: PublicKey;
    /**
     * Account compression authority.
     */
    accountCompressionAuthority: PublicKey;
    /**
     * Account compression program.
     */
    accountCompressionProgram: PublicKey;
    /**
     * Solana pool pda. Some() if compression or decompression is done.
     */
    solPoolPda: PublicKey | null;
    /**
     * Decompression recipient.
     */
    decompressionRecipient: PublicKey | null;
    /**
     * Solana system program.
     */
    systemProgram: PublicKey;
};
export declare const invokeAccountsLayout: (accounts: invokeAccountsLayoutParams) => AccountMeta[];
export declare const PublicTransactionEventLayout: Layout<PublicTransactionEvent>;
export declare function encodePublicTransactionEvent(data: PublicTransactionEvent): Buffer;
export declare function decodePublicTransactionEvent(buffer: Buffer): PublicTransactionEvent;
export declare const AppendNullifyCreateAddressInputsMetaLayout: import("buffer-layout").Layout<unknown>;
export declare const AppendLeavesInputLayout: import("buffer-layout").Layout<unknown>;
export declare const InsertNullifierInputLayout: import("buffer-layout").Layout<unknown>;
export declare const InsertAddressInputLayout: import("buffer-layout").Layout<unknown>;
export declare const MerkleTreeSequenceNumberLayout: import("buffer-layout").Layout<unknown>;
export declare function deserializeAppendNullifyCreateAddressInputsIndexer(buffer: Buffer): {
    meta: unknown;
    leaves: unknown[];
    nullifiers: unknown[];
    addresses: unknown[];
    sequence_numbers: unknown[];
    output_leaf_indices: number[];
};
export declare function convertToPublicTransactionEvent(decoded: any, remainingAccounts: PublicKey[], invokeData: InstructionDataInvoke): PublicTransactionEvent;
