import { AccountMeta, PublicKey } from '@solana/web3.js';
import { AccountProofInput, CompressedAccountLegacy, NewAddressProofInput, OutputCompressedAccountWithPackedContext, PackedCompressedAccountWithMerkleContext, TreeInfo } from '../../state';
import { CompressedAccountWithMerkleContextLegacy, PackedAddressTreeInfo, PackedStateTreeInfo } from '../../state/compressed-account';
/**
 * @internal Finds the index of a PublicKey in an array, or adds it if not
 * present
 * */
export declare function getIndexOrAdd(accountsArray: PublicKey[], key: PublicKey): number;
/**
 * @internal
 * Pads output state trees with the 0th state tree of the input state.
 *
 * @param outputStateMerkleTrees                    Optional output state trees
 *                                                  to be inserted into the
 *                                                  output state. Defaults to
 *                                                  the 0th state tree of the
 *                                                  input state. Gets padded to
 *                                                  the length of
 *                                                  outputCompressedAccounts.
 * @param numberOfOutputCompressedAccounts          The number of output
 *                                                  compressed accounts.
 *
 * @returns Padded output state trees.
 */
export declare function padOutputStateMerkleTrees(outputStateMerkleTrees: PublicKey, numberOfOutputCompressedAccounts: number): PublicKey[];
export declare function toAccountMetas(remainingAccounts: PublicKey[]): AccountMeta[];
export interface PackedStateTreeInfos {
    packedTreeInfos: PackedStateTreeInfo[];
    outputTreeIndex: number;
}
export interface PackedTreeInfos {
    stateTrees?: PackedStateTreeInfos;
    addressTrees: PackedAddressTreeInfo[];
}
/**
 * Packs TreeInfos. Replaces PublicKey with index pointer to remaining accounts.
 *
 * Only use for MUT, CLOSE, NEW_ADDRESSES. For INIT, pass
 * {@link newAddressParamsPacked} and `outputStateTreeIndex` to your program
 * instead.
 *
 *
 * @param remainingAccounts                 Optional existing array of accounts
 *                                          to append to.
 * @param accountProofInputs                Account proof inputs.
 * @param newAddressProofInputs             New address proof inputs.
 *
 * @returns Remaining accounts, packed state and address tree infos, state tree
 * output index and address tree infos.
 */
export declare function packTreeInfos(remainingAccounts: PublicKey[], accountProofInputs: AccountProofInput[], newAddressProofInputs: NewAddressProofInput[]): PackedTreeInfos;
/**
 * Packs Compressed Accounts.
 *
 * Replaces PublicKey with index pointer to remaining accounts.
 *
 *
 * @param inputCompressedAccounts           Ix input state to be consumed
 * @param inputStateRootIndices             The recent state root indices of the
 *                                          input state. The expiry is tied to
 *                                          the proof.
 * @param outputCompressedAccounts          Ix output state to be created
 * @param outputStateTreeInfo               The output state tree info. Gets
 *                                          padded to the length of
 *                                          outputCompressedAccounts.
 *
 * @param remainingAccounts                 Optional existing array of accounts
 *                                          to append to.
 **/
export declare function packCompressedAccounts(inputCompressedAccounts: CompressedAccountWithMerkleContextLegacy[], inputStateRootIndices: number[], outputCompressedAccounts: CompressedAccountLegacy[], outputStateTreeInfo?: TreeInfo, remainingAccounts?: PublicKey[]): {
    packedInputCompressedAccounts: PackedCompressedAccountWithMerkleContext[];
    packedOutputCompressedAccounts: OutputCompressedAccountWithPackedContext[];
    remainingAccounts: PublicKey[];
};
